{"ast":null,"code":"import { gsap } from 'gsap/dist/gsap';\nimport { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\nimport lottie from 'lottie-web';\ngsap.registerPlugin(ScrollTrigger);\n\nvar ScrollLottie = function ScrollLottie(obj) {\n  var anim = lottie.loadAnimation({\n    container: obj.target,\n    renderer: 'canvas',\n    loop: false,\n    autoplay: false,\n    path: obj.path,\n    rendererSettings: {\n      progressiveLoad: true,\n      preserveAspectRatio: 'xMidYMid slice'\n    }\n  });\n  anim.addEventListener('DOMLoaded', function () {\n    console.log('Lottie Loaded');\n    gsap.fromTo(obj.target, {\n      opacity: 0\n    }, {\n      duration: 0.5,\n      opacity: 1\n    }); // Scrolls the page slightly to force lottie to display\n\n    if (window.scrollY != 0) {\n      window.scrollBy(0, 1);\n    }\n  });\n  var timeObj = {\n    currentFrame: 0\n  };\n  var endString = '+=' + obj.duration.toString();\n  ScrollTrigger.create({\n    trigger: obj.target,\n    scrub: true,\n    pin: true,\n    start: 'top top',\n    end: endString,\n    onUpdate: function onUpdate(self) {\n      if (obj.acceleration) {\n        gsap.to(timeObj, {\n          duration: obj.acceleration,\n          currentFrame: self.progress * (anim.totalFrames - 1),\n          onUpdate: function onUpdate() {\n            anim.goToAndStop(timeObj.currentFrame, true);\n          },\n          ease: 'expo'\n        });\n      } else {\n        anim.goToAndStop(self.progress * (anim.totalFrames - 1), true);\n      }\n    }\n  });\n};\n\n_c = ScrollLottie;\nexport default ScrollLottie;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScrollLottie\");","map":{"version":3,"sources":["C:/Users/anche/Desktop/Coding/Cornell/Rocketry/rocketry-web/lib/ScrollLottie.js"],"names":["gsap","ScrollTrigger","lottie","registerPlugin","ScrollLottie","obj","anim","loadAnimation","container","target","renderer","loop","autoplay","path","rendererSettings","progressiveLoad","preserveAspectRatio","addEventListener","console","log","fromTo","opacity","duration","window","scrollY","scrollBy","timeObj","currentFrame","endString","toString","create","trigger","scrub","pin","start","end","onUpdate","self","acceleration","to","progress","totalFrames","goToAndStop","ease"],"mappings":"AAAA,SAASA,IAAT,QAAqB,gBAArB;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAEAF,IAAI,CAACG,cAAL,CAAoBF,aAApB;;AAEA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AAC5B,MAAIC,IAAI,GAAGJ,MAAM,CAACK,aAAP,CAAqB;AAC9BC,IAAAA,SAAS,EAAEH,GAAG,CAACI,MADe;AAE9BC,IAAAA,QAAQ,EAAE,QAFoB;AAG9BC,IAAAA,IAAI,EAAE,KAHwB;AAI9BC,IAAAA,QAAQ,EAAE,KAJoB;AAK9BC,IAAAA,IAAI,EAAER,GAAG,CAACQ,IALoB;AAM9BC,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,eAAe,EAAE,IADD;AAEhBC,MAAAA,mBAAmB,EAAE;AAFL;AANY,GAArB,CAAX;AAYAV,EAAAA,IAAI,CAACW,gBAAL,CAAsB,WAAtB,EAAmC,YAAM;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAnB,IAAAA,IAAI,CAACoB,MAAL,CAAYf,GAAG,CAACI,MAAhB,EAAwB;AAAEY,MAAAA,OAAO,EAAE;AAAX,KAAxB,EAAwC;AAAEC,MAAAA,QAAQ,EAAE,GAAZ;AAAiBD,MAAAA,OAAO,EAAE;AAA1B,KAAxC,EAFuC,CAIvC;;AACA,QAAIE,MAAM,CAACC,OAAP,IAAkB,CAAtB,EAAyB;AACvBD,MAAAA,MAAM,CAACE,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACD;AACF,GARD;AAUA,MAAIC,OAAO,GAAG;AAAEC,IAAAA,YAAY,EAAE;AAAhB,GAAd;AACA,MAAIC,SAAS,GAAG,OAAOvB,GAAG,CAACiB,QAAJ,CAAaO,QAAb,EAAvB;AAEA5B,EAAAA,aAAa,CAAC6B,MAAd,CAAqB;AACnBC,IAAAA,OAAO,EAAE1B,GAAG,CAACI,MADM;AAEnBuB,IAAAA,KAAK,EAAE,IAFY;AAGnBC,IAAAA,GAAG,EAAE,IAHc;AAInBC,IAAAA,KAAK,EAAE,SAJY;AAKnBC,IAAAA,GAAG,EAAEP,SALc;AAMnBQ,IAAAA,QAAQ,EAAE,kBAACC,IAAD,EAAU;AAClB,UAAIhC,GAAG,CAACiC,YAAR,EAAsB;AACpBtC,QAAAA,IAAI,CAACuC,EAAL,CAAQb,OAAR,EAAiB;AACfJ,UAAAA,QAAQ,EAAEjB,GAAG,CAACiC,YADC;AAEfX,UAAAA,YAAY,EAAEU,IAAI,CAACG,QAAL,IAAiBlC,IAAI,CAACmC,WAAL,GAAmB,CAApC,CAFC;AAGfL,UAAAA,QAAQ,EAAE,oBAAM;AACd9B,YAAAA,IAAI,CAACoC,WAAL,CAAiBhB,OAAO,CAACC,YAAzB,EAAuC,IAAvC;AACD,WALc;AAMfgB,UAAAA,IAAI,EAAE;AANS,SAAjB;AAQD,OATD,MASO;AACLrC,QAAAA,IAAI,CAACoC,WAAL,CAAiBL,IAAI,CAACG,QAAL,IAAiBlC,IAAI,CAACmC,WAAL,GAAmB,CAApC,CAAjB,EAAyD,IAAzD;AACD;AACF;AAnBkB,GAArB;AAqBD,CA/CD;;KAAMrC,Y;AAiDN,eAAeA,YAAf","sourcesContent":["import { gsap } from 'gsap/dist/gsap';\r\nimport { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\r\nimport lottie from 'lottie-web';\r\n\r\ngsap.registerPlugin(ScrollTrigger);\r\n\r\nconst ScrollLottie = (obj) => {\r\n  let anim = lottie.loadAnimation({\r\n    container: obj.target,\r\n    renderer: 'canvas',\r\n    loop: false,\r\n    autoplay: false,\r\n    path: obj.path,\r\n    rendererSettings: {\r\n      progressiveLoad: true,\r\n      preserveAspectRatio: 'xMidYMid slice',\r\n    },\r\n  });\r\n\r\n  anim.addEventListener('DOMLoaded', () => {\r\n    console.log('Lottie Loaded');\r\n    gsap.fromTo(obj.target, { opacity: 0 }, { duration: 0.5, opacity: 1 });\r\n\r\n    // Scrolls the page slightly to force lottie to display\r\n    if (window.scrollY != 0) {\r\n      window.scrollBy(0, 1);\r\n    }\r\n  });\r\n\r\n  let timeObj = { currentFrame: 0 };\r\n  let endString = '+=' + obj.duration.toString();\r\n\r\n  ScrollTrigger.create({\r\n    trigger: obj.target,\r\n    scrub: true,\r\n    pin: true,\r\n    start: 'top top',\r\n    end: endString,\r\n    onUpdate: (self) => {\r\n      if (obj.acceleration) {\r\n        gsap.to(timeObj, {\r\n          duration: obj.acceleration,\r\n          currentFrame: self.progress * (anim.totalFrames - 1),\r\n          onUpdate: () => {\r\n            anim.goToAndStop(timeObj.currentFrame, true);\r\n          },\r\n          ease: 'expo',\r\n        });\r\n      } else {\r\n        anim.goToAndStop(self.progress * (anim.totalFrames - 1), true);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nexport default ScrollLottie;\r\n"]},"metadata":{},"sourceType":"module"}